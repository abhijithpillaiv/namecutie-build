{"version":3,"file":"static/js/490.e2f25c8f.chunk.js","mappings":"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","sources":["assets/collection.js","views/UniquePage/alphabet.js","views/section/Name.js","views/section/lodr.js"],"sourcesContent":["module.exports={\nport:'http://localhost:9000/',\n}","import React, { useEffect, useState } from 'react'\nimport {useParams} from 'react-router-dom'\nimport Name from '../section/Name'\nimport Lodr from '../section/lodr'\nimport axios from 'axios'\nimport collection from '../../assets/collection'\n\nconst Alphabet = () => {\n  const {alpha}=useParams() \n  const [char, setchar] = useState(null)\n  const getData=()=>{\n    axios.get(collection.port+'api/admin/getNames/alphabet/'+alpha).then((res)=>{\n      setchar(res)\n    })\n  }\n  useEffect(() => {\n    setchar(null)\n    getData()\n  }, [alpha]);\n  return (\n    <>\n    {char?<Name gender={alpha} props={char.data}/>:<Lodr/>}\n    </>\n  )\n}\n\nexport default Alphabet","import React, { useState } from 'react'\nimport { useEffect } from 'react'\nimport CIcon from '@coreui/icons-react'\nimport Lodr from '../section/lodr'\nimport ReactPaginate from 'react-paginate';\nimport { useNavigate } from 'react-router-dom';\nimport collection from '../../assets/collection'\nimport './page.css'\nimport {\n    CCard,\n    CCardBody,\n    CCol,\n    CRow,\n    CTable,\n    CTableBody,\n    CTableDataCell,\n    CTableHead,\n    CTableHeaderCell,\n    CTableRow,\n    CInputGroup,\n    CFormInput,\n    CInputGroupText,\n} from '@coreui/react'\nimport {\n    cilHeart,\n    cilPen,\n    cilSearch,\n    cilX,\n} from '@coreui/icons'\nimport axios from 'axios';\nconst Name = ({ gender, props }) => {\n\n    const navigate = useNavigate();\n\n    const editHandler = (_id) => {\n        navigate('/names/editName/' + _id)\n    }\n    const deleteHandler = (propIndex, name, _id, index) => {\n        setprogress(false)\n        if (window.confirm('Do you want to delete ' + name + ' ?')) {\n            axios.get(collection.port + 'api/admin/deleteName/' + _id).then((res) => {\n                props.splice(propIndex, 1)\n                pagination.currentData.splice(index, 1)\n                setprogress(true)\n            })\n        }\n        else {\n            setprogress(true)\n        }\n    }\n\n    const clickhandler = (_id) => {\n        setprogress(false)\n        navigate('/names/singleName/' + _id);\n        setprogress(true)\n\n    }\n\n    const [progress, setprogress] = useState(true);\n    const [Search, setSearch] = useState(null);\n\n\n    //pagination \n    const [pagination, setPagination] = useState({\n        data: props.map((value, index) => (({\n            name: value.name,\n            meaning: value.meaning,\n            like: value.like,\n            gender: value.gender,\n            _id: value._id,\n            propIndex: index\n        }))),\n        offset: 0,\n        numberPerPage: 10,\n        pageCount: 0,\n        currentData: []\n    });\n\n    useEffect(() => {\n        setPagination((prevState) => ({\n            ...prevState,\n            pageCount: prevState.data.length / prevState.numberPerPage,\n            currentData: prevState.data.slice(pagination.offset, pagination.offset + pagination.numberPerPage)\n        }))\n    }, [pagination.numberPerPage, pagination.offset])\n    const handlePageClick = event => {\n        const selected = event.selected;\n        const offset = selected * pagination.numberPerPage\n        setPagination({ ...pagination, offset })\n    }\n    let serchList = null;\n\n\n    return (\n       Search ?  <div><CRow>\n       <CCard className=\"mb-0\">\n           <CCardBody>\n               <CInputGroup className=\"flex-nowrap\">\n                   <CInputGroupText id=\"addon-wrapping\"><CIcon icon={cilSearch} /></CInputGroupText>\n                   <CFormInput onChange={(e)=>setSearch(e.target.value)} placeholder=\"Search\" aria-label=\"Search\" aria-describedby=\"addon-wrapping\" />\n               </CInputGroup>\n               <CCol >\n                   <div style={{ fontFamily: 'sans-serif', fontSize: 'x-large', textAlign: 'center', fontWeight: 'bold', color: 'blue' }}>{gender}</div>\n                   <br />\n                   <CTable style={{ cursor: 'pointer' }} align=\"middle\" className=\"mb-0 border\" hover responsive>\n                       <CTableHead color=\"light\">\n                           <CTableRow>\n                               <CTableHeaderCell>Name</CTableHeaderCell>\n                               <CTableHeaderCell >Meaning</CTableHeaderCell>\n                               <CTableHeaderCell >Likes</CTableHeaderCell>\n                               <CTableHeaderCell >Edit/Delete</CTableHeaderCell>\n                           </CTableRow>\n                       </CTableHead>\n                       <CTableBody>\n                           {props ?props.sort((obj,obj2)=>obj.select===obj2.select?obj.name.toLowerCase()>obj2.name.toLowerCase()?1:-1:obj.select==='true'?-1:1)\n                              .filter((obj)=>{\n                                if(Search === ''){\n                                    serchList = obj\n                                }\n                                else if(obj.name.toString().toLowerCase().includes(Search.toString().toLowerCase())){\n                                    serchList = obj\n                                }\n                                else{}\n                                return serchList\n                            }).map((item, index) => (\n                               <CTableRow v-for=\"item in tableItems\" key={index}>\n\n                                   <CTableDataCell onClick={() => clickhandler(item._id)}>\n                                       <div>{item.name}</div>\n                                   </CTableDataCell>\n\n                                   <CTableDataCell onClick={() => clickhandler(item._id)}>\n                                       <strong>{item.meaning}</strong>\n                                   </CTableDataCell>\n\n                                   <CTableDataCell onClick={() => clickhandler(item._id)}>\n                                       <CIcon icon={cilHeart} size='sm' />\n                                       <span style={{ fontSize: 'small' }}>   {item.like}</span>\n                                   </CTableDataCell>\n\n                                   <CTableDataCell>\n                                       <CIcon onClick={() => editHandler(item._id)} style={{ color: \"blue\", cursor: 'pointer' }} icon={cilPen} size='lg' />\n                                       <CIcon onClick={() => deleteHandler(item.propIndex, item.name, item._id, index)} style={{ color: \"red\", cursor: 'pointer', marginLeft: '20px' }} icon={cilX} size='lg' />\n                                   </CTableDataCell>\n\n\n                               </CTableRow>\n                           )):null}\n                       </CTableBody>\n                   </CTable>\n               </CCol>\n               {/* <CIcon icon={cilPuzzle} size='sm'/> */}\n\n           </CCardBody>\n\n       </CCard>\n   </CRow>\n   </div> : progress && pagination.currentData ? <div><CRow>\n            <CCard className=\"mb-0\">\n                <CCardBody>\n                    <CInputGroup className=\"flex-nowrap\">\n                        <CInputGroupText id=\"addon-wrapping\"><CIcon icon={cilSearch} /></CInputGroupText>\n                        <CFormInput onChange={(e)=>setSearch(e.target.value)} placeholder=\"Search\" aria-label=\"Search\" aria-describedby=\"addon-wrapping\" />\n                    </CInputGroup>\n                    <CCol >\n                        <div style={{ fontFamily: 'sans-serif', fontSize: 'x-large', textAlign: 'center', fontWeight: 'bold', color: 'blue' }}>{gender}</div>\n                        <br />\n                        <CTable style={{ cursor: 'pointer' }} align=\"middle\" className=\"mb-0 border\" hover responsive>\n                            <CTableHead color=\"light\">\n                                <CTableRow>\n                                    <CTableHeaderCell>Name</CTableHeaderCell>\n                                    <CTableHeaderCell >Meaning</CTableHeaderCell>\n                                    <CTableHeaderCell >Likes</CTableHeaderCell>\n                                    <CTableHeaderCell >Edit/Delete</CTableHeaderCell>\n                                </CTableRow>\n                            </CTableHead>\n                            <CTableBody>\n                                {pagination.currentData.map((item, index) => (\n                                    <CTableRow v-for=\"item in tableItems\" key={index}>\n\n                                        <CTableDataCell onClick={() => clickhandler(item._id)}>\n                                            <div>{item.name}</div>\n                                        </CTableDataCell>\n\n                                        <CTableDataCell onClick={() => clickhandler(item._id)}>\n                                            <strong>{item.meaning}</strong>\n                                        </CTableDataCell>\n\n                                        <CTableDataCell onClick={() => clickhandler(item._id)}>\n                                            <CIcon icon={cilHeart} size='sm' />\n                                            <span style={{ fontSize: 'small' }}>   {item.like}</span>\n                                        </CTableDataCell>\n\n                                        <CTableDataCell>\n                                            <CIcon onClick={() => editHandler(item._id)} style={{ color: \"blue\", cursor: 'pointer' }} icon={cilPen} size='lg' />\n                                            <CIcon onClick={() => deleteHandler(item.propIndex, item.name, item._id, index)} style={{ color: \"red\", cursor: 'pointer', marginLeft: '20px' }} icon={cilX} size='lg' />\n                                        </CTableDataCell>\n\n\n                                    </CTableRow>\n                                ))}\n                            </CTableBody>\n                        </CTable>\n                    </CCol>\n                    {/* <CIcon icon={cilPuzzle} size='sm'/> */}\n\n                </CCardBody>\n\n            </CCard>\n        </CRow>\n            <ReactPaginate\n                previousLabel={'previous'}\n                nextLabel={'next'}\n                breakLabel={'...'}\n                pageCount={pagination.pageCount}\n                marginPagesDisplayed={2}\n                pageRangeDisplayed={5}\n                onPageChange={handlePageClick}\n                containerClassName={'pagination'}\n                activeClassName={'activez'}\n            />\n        </div> : <Lodr />\n\n    )\n}\n\nexport default Name","import React from 'react'\nimport lodr from '../../assets/lodr.gif'\n\nexport default function loader() {\n  return (\n    <img style={{height:'100px',width:'auto'}} src={lodr} alt='lodr'/>\n  )\n}\n"],"names":["module","exports","port","alpha","useParams","useState","char","setchar","useEffect","axios","collection","then","res","gender","props","data","navigate","useNavigate","editHandler","_id","deleteHandler","propIndex","name","index","setprogress","window","confirm","splice","pagination","currentData","clickhandler","progress","Search","setSearch","map","value","meaning","like","offset","numberPerPage","pageCount","setPagination","prevState","length","slice","serchList","className","id","icon","cilSearch","onChange","e","target","placeholder","style","fontFamily","fontSize","textAlign","fontWeight","color","cursor","align","hover","responsive","sort","obj","obj2","select","toLowerCase","filter","toString","includes","item","onClick","cilHeart","size","cilPen","marginLeft","cilX","previousLabel","nextLabel","breakLabel","marginPagesDisplayed","pageRangeDisplayed","onPageChange","event","selected","containerClassName","activeClassName","loader","height","width","src","lodr","alt"],"sourceRoot":""}